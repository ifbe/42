project=$(shell pwd)
library=../../library




#asm
AS=as
AF=
#c
CC=gcc
CF=-c -fPIC -ffreestanding -fno-stack-protector -mno-sse2 -mno-red-zone -Wno-address-of-packed-member -I$(library)/lib1
CF_GNUEFI=-fshort-wchar -DGNU_EFI_USE_MS_ABI -I$(library)/lib0/gnu-efi -I$(library)/lib0/gnu-efi/inc -I$(library)/lib0/gnu-efi/inc/x86_64 -I$(library)/lib0/gnu-efi/inc/protocol
#link
LD=ld
LF=-nostdlib -znocombreloc -T loader.ld -shared -Bsymbolic
#objcopy
CP=objcopy
#linux(make), non-linux(make cross)
ifeq ($(filter cross,$(MAKECMDGOALS)),cross)
	AS := x86_64-elf-as
	CC := x86_64-elf-gcc
	LD := x86_64-elf-ld
	CP := x86_64-elf-objcopy
endif




linux:
	make -f makefile.bin2pe gnuefi
	make -f makefile.bin2pe addbin
	make -f makefile.bin2pe link
	make -f makefile.bin2pe elf2pe
cross:
	make -f makefile.bin2pe gnuefi AS=$(AS) CC=$(CC)
	make -f makefile.bin2pe addbin CP=$(CP)
	make -f makefile.bin2pe link LD=$(LD)
	make -f makefile.bin2pe elf2pe CP=$(CP)
gnuefi:
	$(AS) $(AF) $(library)/libboot0/bare/efi/carrybin/loader-start.S -o loader-start.o
	$(CC) $(CF) $(CF_GNUEFI) $(library)/libboot0/bare/efi/carrybin/loader-main.c -o loader-main.o
addbin:
	$(CP) --add-section .binary=kernel.bin loader-main.o
link:
	$(LD) $(LF) loader-start.o loader-main.o -o loader.so
elf2pe:
	$(CP) -j .text -j .sdata -j .data -j .dynamic -j .dynsym -j .rel -j .rela -j .reloc --target=efi-app-x86_64 loader.so loader.efi




clean:
	rm -rf lib*/*.o
	rm -f *.o *.so *.efi *.EFI
