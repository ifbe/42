<entity>
sky{
fmt:equirect
arg:datafile/jpg/texball-skysphere.jpg
}
gnd{
fmt:ground
albedo:datafile/jpg/wall.jpg
normal:datafile/jpg/wallnormal.jpg
}
dog{
fmt:robodog
}
car{
fmt:rccar
}
test{
fmt:rccar
}
freecam{
fmt:freecam
}
virtual{
fmt:virtual
}
slider{
fmt:slider
}

cam3rd{
fmt:cam3rd
}
follow{
fmt:follow
}
wander{
fmt:wander
}
</entity>


<supply>
opengl{
fmt:wnd
title:"42"
width:1024
height:1024
depth:1024
}
</supply>


<artery>
reline{
fmt:reline
}
conv{
fmt:str2vec
}
</artery>


<system>
udphost{
fmt:UDP
arg:0.0.0.0:9999
}
</system>


<bootup>
pulser{
fmt:pulser
}
</bootup>


<style>
skyhaha{
}
skygeom{
c: 0.0, 0.0, 0.0
r: 1000000.0, 0.0, 0.0
f: 0.0, 1000000.0, 0.0
t: 0.0, 0.0, 1000000.0
}

gndhaha{
}
gndgeom{
c: 0.0, 0.0, 0.0
r: 10000.0, 0.0, 0.0
f: 0.0, 10000.0, 0.0
t: 0.0, 0.0, 1000.0
}

doghaha{
}
doggeom{
c: 0.0, 0.0, 0.0
r: 1000.0, 0.0, 0.0, 1000
f: 0.0, 1000.0, 0.0, 1000
t: 0.0, 0.0, 1000.0, 1000
}

carhaha{
}
cargeom{
c: 0.0, 0.0, 0.0
r: 1000.0, 0.0, 0.0, 1000
f: 0.0, 1000.0, 0.0, 1000
t: 0.0, 0.0, 1000.0, 1000
}

testhaha{
}
testgeom{
c: 0.0, 0.0, 0.0
r: 1000.0, 0.0, 0.0, 1000
f: 0.0, 1000.0, 0.0, 1000
t: 0.0, 0.0, 1000.0, 1000
}

freemodl{
}
freegeom{
c: 0.0, -10000.0, 10000.0
r: 1000.0, 0.0, 0.0
f: 0.0, 866.0,-500.0
t: 0.0, 500.0, 866.0
L: 0.0, 0.0, 0.0, -1.0
R: 0.0, 0.0, 0.0, 1.0
B: 0.0, 0.0, 0.0, -1.0
T: 0.0, 0.0, 0.0, 1.0
N: 0.0, 0.0, 0.0, 1.0
F: 0.0, 0.0, 0.0, 1000000000.0
}

freerect{
c:0.0, 0.0
q:1.0, 1.0
}
thatrect{
c:0.0, 0.3
q:0.3, 0.4
}
</style>


<relation>
#virtual depends on inner objects
(virtual, skygeom, 0) -> (sky, skyhaha, 0)
(virtual, gndgeom, 0) -> (gnd, gndhaha, 0)
(virtual, doggeom, 0) -> (dog, doghaha, 0)
(virtual, cargeom, 0) -> (car, carhaha, 0)
(virtual, testgeom, 0) -> (test, testhaha, 0)
(virtual, freegeom, 0) -> (freecam, freemodl, 0)

#glwnd depends on cam
(opengl, freerect, 0) -> (freecam, 0, 0)
(opengl, thatrect, 0) -> (slider, 0, 0)

#thirdperson controller
(cam3rd, 0, tar) -> (dog, 0, evby)
(cam3rd, 0, cam) -> (freecam, 0, evto)

#dog pose
(slider, 0, evto) -> (dog, 0, int)
(conv, 0, vec) -> (dog, 0, 0)
(udphost, 0, dst) -> (conv, 0, str)

#car follow dog
(follow, 0, self) -> (car, 0, 0)
(follow, 0, that) -> (dog, 0, 0)

#test wander
(wander, 0, self) -> (test, 0, 0)

#clock
(pulser, 0, clk) -> (follow, 0, clk)
(pulser, 0, clk) -> (wander, 0, clk)
</relation>
